[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 1, 1 ) ]
operator = 2

[resource]
code = "shader_type canvas_item;
uniform sampler2D TextureUniform;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// VectorOp:4
	vec3 n_in4p1 = vec3(2.00000, 1.00000, 1.00000);
	vec3 n_out4p0 = n_out3p0 * n_in4p1;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, n_out4p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
custom_defines = ""
graph_offset = Vector2( -488, -170 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 320, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -40, 60 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -460, -80 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -250, 47 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 4, 0, 4, 0, 2, 0 )
